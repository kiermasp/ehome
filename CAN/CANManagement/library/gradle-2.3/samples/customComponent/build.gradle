
/*
 * Copyright 2014 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.model.Model
import org.gradle.model.Mutate
import org.gradle.model.RuleSource
import org.gradle.model.collection.CollectionBuilder

interface ImageComponent extends LibrarySpec { }
class DefaultImageComponent extends BaseComponentSpec implements ImageComponent {}

interface ImageBinary extends BinarySpec {
    String getTitle()
    String getSize()
}

class DefaultImageBinary extends BaseBinarySpec implements ImageBinary {
    String title
    String size
}

class ImagesExtension {
    List<String> titles = new ArrayList<String>()
    List<String> sizes = new ArrayList<String>()
}

class MyImageRenderingPlugin implements Plugin<Project> {
    void apply(Project project) {
    }

    @RuleSource
    static class Rules {
        @Model("images")
        ImagesExtension createSampleExtension() {
             return new ImagesExtension()
        }

        @ComponentType
        void register(ComponentTypeBuilder<ImageComponent> builder) {
            builder.defaultImplementation(DefaultImageComponent)
        }

        @Mutate
        void createImageComponents(CollectionBuilder<ImageComponent> sampleLibraries, ImagesExtension imagesExtension) {
            for (String libraryName : imagesExtension.getTitles()) {
                sampleLibraries.create(libraryName)
            }
        }

        @BinaryType
        void register(BinaryTypeBuilder<ImageBinary> builder) {
            builder.defaultImplementation(DefaultImageBinary)
        }

        @ComponentBinaries
        void createBinariesForBinaryComponent(CollectionBuilder<ImageBinary> binaries, ImageComponent library, ImagesExtension imagesExtension) {
            imagesExtension.sizes.each{ fontSize ->
                binaries.create("${library.name}${fontSize}Binary"){
                    it.size = fontSize;
                    it.title = library.name
                }
            }
        }

        @BinaryTasks
        void createRenderingTasks(CollectionBuilder<Task> tasks, ImageBinary binary) {
            tasks.create("render${binary.title}${binary.size}Svg", RenderSvg){
                it.content = binary.title;
                it.fontSize = binary.size;
                it.outputFile = new File(it.project.buildDir, "renderedSvg/${binary.title}_${binary.size}.svg")
            }
        }
    }
}


class RenderSvg extends DefaultTask{
    @Input String content;
    @Input String fontSize;
    @OutputFile File outputFile;

    @TaskAction void paint(){
        outputFile.write("""
             <svg xmlns="http://www.w3.org/2000/svg" xmlns:svg="http://www.w3.org/2000/svg"
             xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" viewBox="16 8 400 100" preserveAspectRatio="xMidYMid meet" zoomAndPan="disable" onload="">
             <text x="50" y="70" id="e1_texte" style="fill: #000000; font-family: Verdana; font-size: ${fontSize}; stroke: #008000; font-style: normal; font-weight: bold;">$content</text></svg>
             """.stripIndent());

    }
}

apply plugin:MyImageRenderingPlugin

model {
    images {
        titles << "TitleA" << "TitleB"
        sizes << "14px" << "28px" << "40px"
    }
}


